#ifndef ASF__OBJECT_GUID_HPP_
#define ASF__OBJECT_GUID_HPP_

#include <fstream>
#include <cstdint>
#include <vector>

class ObjectGuid {
private:
    enum GuidType {
        ID,
        OBJECT
    };
    typedef struct GuidStruct {
        uint32_t v1;
        uint16_t v2;
        uint16_t v3;
        std::vector<uint8_t> v4;
    } asf_guid_t;

    const std::vector<asf_guid_t> VALID_OBJECT_GUIDS = {
        {
            0x0,
            0x0,
            0x0,
            {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}
        },
        {
            0x75B22630,
            0x668E,
            0x11CF,
            {0xA6, 0xD9, 0x00, 0xAA, 0x00, 0x62, 0xCE, 0x6C}
        },
        {
            0x75B22636,
            0x668E,
            0x11CF,
            {0xA6, 0xD9, 0x00, 0xAA, 0x00, 0x62, 0xCE, 0x6C}
        },
        {
            0x33000890,
            0xE5B1,
            0x11CF,
            {0x89, 0xF4, 0x00, 0xA0, 0xC9, 0x03, 0x49, 0xCB}
        },
        {
            0xD6E229D3,
            0x35DA,
            0x11D1,
            {0x90, 0x34, 0x00, 0xA0, 0xC9, 0x03, 0x49, 0xBE}
        },
        {
            0xFEB103F8,
            0x12AD,
            0x4C64,
            {0x84, 0x0F, 0x2A, 0x1D, 0x2F, 0x7A, 0xD4, 0x8C}
        },
        {
            0x3CB73FD0,
            0x0C4A,
            0x4803,
            {0x95, 0x3D, 0xED, 0xF7, 0xB6, 0x22, 0x8F, 0x0C}
        },
        {
            0x8CABDCA1,
            0xA947,
            0x11CF,
            {0x8E, 0xE4, 0x00, 0xC0, 0x0C, 0x20, 0x53, 0x65}
        },
        {
            0xB7DC0791,
            0xA9B7,
            0x11CF,
            {0x8E, 0xE6, 0x00, 0xC0, 0x0C, 0x20, 0x53, 0x65}
        },
        {
            0x5FBF03B5,
            0xA92E,
            0x11CF,
            {0x8E, 0xE3, 0x00, 0xC0, 0x0C, 0x20, 0x53, 0x65}
        },
        {
            0x86D15240,
            0x311D,
            0x11D0,
            {0xA3, 0xA4, 0x00, 0xA0, 0xC9, 0x03, 0x48, 0xF6}
        },
        {
            0x1EFB1A30,
            0x0B62,
            0x11D0,
            {0xA3, 0x9B, 0x00, 0xA0, 0xC9, 0x03, 0x48, 0xF6}
        },
        {
            0xF487CD01,
            0xA951,
            0x11CF,
            {0x8E, 0xE6, 0x00, 0xC0, 0x0C, 0x20, 0x53, 0x65}
        },
        {
            0xD6E229DC,
            0x35DA,
            0x11D1,
            {0x90, 0x34, 0x00, 0xA0, 0xC9, 0x03, 0x49, 0xBE}
        },
        {
            0x75B22635,
            0x668E,
            0x11CF,
            {0xA6, 0xD9, 0x00, 0xAA, 0x00, 0x62, 0xCE, 0x6C}
        },
        {
            0x75B22633,
            0x668E,
            0x11CF,
            {0xA6, 0xD9, 0x00, 0xAA, 0x00, 0x62, 0xCE, 0x6C}
        },
        {
            0xD2D0A440,
            0xE307,
            0x11D2,
            {0x97, 0xF0, 0x00, 0xA0, 0xC9, 0x5E, 0xA8, 0x50}
        },
        {
            0x2211B3FA,
            0xBD23,
            0x11D2,
            {0xB4, 0xB7, 0x00, 0xA0, 0xC9, 0x55, 0xFC, 0x6E}
        },
        {
            0x7BF875CE,
            0x468D,
            0x11D1,
            {0x8D, 0x82, 0x00, 0x60, 0x97, 0xC9, 0xA2, 0xB2}
        },
        {
            0x2211B3FB,
            0xBD23,
            0x11D2,
            {0xB4, 0xB7, 0x00, 0xA0, 0xC9, 0x55, 0xFC, 0x6E}
        },
        {
            0x298AE614,
            0x2622,
            0x4C17,
            {0xB9, 0x35, 0xDA, 0xE0, 0x7E, 0xE9, 0x28, 0x9C}
        },
        {
            0x2211B3FC,
            0xBD23,
            0x11D2,
            {0xB4, 0xB7, 0x00, 0xA0, 0xC9, 0x55, 0xFC, 0x6E}
        },
        {
            0x1806D474,
            0xCADF,
            0x4509,
            {0xA4, 0xBA, 0x9A, 0xAB, 0xCB, 0x96, 0xAA, 0xE8}
        },
        {
            0x14E6A5CB,
            0xC672,
            0x4332,
            {0x83, 0x99, 0xA9, 0x69, 0x52, 0x06, 0x5B, 0x5A}
        },
        {
            0xA08649CF,
            0x4775,
            0x4670,
            {0x8A, 0x16, 0x6E, 0x35, 0x35, 0x75, 0x66, 0xCD}
        },
        {
            0xD1465A40,
            0x5A79,
            0x4338,
            {0xB7, 0x1B, 0xE3, 0x6B, 0x8F, 0xD6, 0xC2, 0x49}
        },
        {
            0xD4FED15B,
            0x88D3,
            0x454F,
            {0x81, 0xF0, 0xED, 0x5C, 0x45, 0x99, 0x9E, 0x24}
        },
        {
            0xA69609E6,
            0x517B,
            0x11D2,
            {0xB6, 0xAF, 0x00, 0xC0, 0x4F, 0xD9, 0x08, 0xE9}
        },
        {
            0x7C4346A9,
            0xEFE0,
            0x4BFC,
            {0xB2, 0x29, 0x39, 0x3E, 0xDE, 0x41, 0x5C, 0x85}
        },
        {
            0xC5F8CBEA,
            0x5BAF,
            0x4877,
            {0x84, 0x67, 0xAA, 0x8C, 0x44, 0xFA, 0x4C, 0xCA}
        },
        {
            0x44231C94,
            0x9498,
            0x49D1,
            {0xA1, 0x41, 0x1D, 0x13, 0x4E, 0x45, 0x70, 0x54}
        },
        {
            0xD6E229DF,
            0x35DA,
            0x11D1,
            {0x90, 0x34, 0x00, 0xA0, 0xC9, 0x03, 0x49, 0xBE}
        },
        {
            0x6B203BAD,
            0x3F11,
            0x48E4,
            {0xAC, 0xA8, 0xD7, 0x61, 0x3D, 0xE2, 0xCF, 0xA7}
        },
        {
            0xF55E496D,
            0x9797,
            0x4B5D,
            {0x8C, 0x8B, 0x60, 0x4D, 0xFE, 0x9B, 0xFB, 0x24}
        },
        {
            0x75B22630,
            0x668E,
            0x11CF,
            {0xA6, 0xD9, 0x00, 0xAA, 0x00, 0x62, 0xCE, 0x6C}
        },
        {
            0x43058533,
            0x6981,
            0x49E6,
            {0x9B, 0x74, 0xAD, 0x12, 0xCB, 0x86, 0xD5, 0x8C}
        }
    };

    uint32_t v1;
    uint16_t v2;
    uint16_t v3;
    std::vector<uint8_t> v4;
    GuidType type_;
public:
    ObjectGuid(uint32_t first = 0x0,
               uint32_t second = 0x0,
               uint16_t third = 0x0,
               std::vector<uint8_t> fourth = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, GuidType type = OBJECT)
        : v1(first), v2(second), v3(third), v4(std::move(fourth)), type_(type)
    {}

    ObjectGuid(const ObjectGuid &obj)
        : v1(obj.v1), v2(obj.v2), v3(obj.v3), v4(obj.v4), type_(obj.type_)
    {}

    ~ObjectGuid() = default;

    std::vector<asf_guid_t> getValidGuids() const
    {
        return VALID_OBJECT_GUIDS;
    }

    ObjectGuid &operator=(const ObjectGuid &obj);

    bool operator==(const ObjectGuid &obj) const;

    bool operator==(const asf_guid_t &obj) const;

    static GuidType id()
    {
        return ID;
    }

    GuidType getType() const
    {
        return type_;
    }

    bool isObject() const
    {
        return type_ == OBJECT;
    }

    std::istream &input(std::istream &in);

};

std::istream &operator>>(std::istream &in, ObjectGuid &obj);

#endif //ASF__OBJECT_GUID_HPP_
